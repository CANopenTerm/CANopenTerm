name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Install dependencies
      run: |
        choco install llvm
        choco install ninja

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-D_DLL -D_MT -Xclang --dependent-lib=msvcrt" -DCMAKE_CXX_FLAGS="-D_DLL -D_MT -Xclang --dependent-lib=msvcrt" -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld-link -nostdlib++ -lmsvcrt -lmsvcprt" -DCMAKE_C_FLAGS_RELEASE="-D_DLL -D_MT -Xclang --dependent-lib=msvcrt" -DCMAKE_CXX_FLAGS_RELEASE="-D_DLL -D_MT -Xclang --dependent-lib=msvcrt" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="-fuse-ld=lld-link -nostdlib++ -lmsvcrt -lmsvcprt" -DCMAKE_MODULE_LINKER_FLAGS_RELEASE="-fuse-ld=lld-link -nostdlib++ -lmsvcrt -lmsvcprt" -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY

    - name: Build with CMake
      run: cmake --build build --config Release

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: nuget restore setup/setup.sln

    - name: Build WiX Toolset solution
      run: |
        cd setup
        msbuild /p:Configuration=Release /p:Platform=x64

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: setup/CANopenTerm/bin/x64/Release/en-US/CANopenTerm.msi

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .

    - name: Get release by tag
      id: get_release
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/${{ github.repository }}/releases/tags/latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Delete existing release
      if: steps.get_release.outputs.status == 200
      id: delete_release
      uses: octokit/request-action@v2.x
      with:
        route: DELETE /repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.data.id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: "Latest Release"
        draft: false
        prerelease: false
        body: "This is the most recent build."

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./CANopenTerm.msi
        asset_name: CANopenTerm-latest.msi
        asset_content_type: application/octet-stream
